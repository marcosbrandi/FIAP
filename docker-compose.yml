version: '3.4'

volumes:
  grafana_data: {}

services:
  techchallengefiap.api:
    image: ${DOCKER_REGISTRY-}techchallengefiapapi
    container_name: techchallengefiap.api
    build:
      context: .
      dockerfile: TechChallengeFIAP.API/Dockerfile
    ports: 
       - "5000:5000"
       - "5001:5001"
    depends_on:
        prometheus:
            condition: service_healthy
        grafana:
            condition: service_healthy

  techchallengefiap.database:
      image: postgres:latest
      container_name: techchallengefiap.database
      environment: 
        - POSTGRES_DB=fiap
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
      volumes:
        - ./.containers/techchallengefiap-db:/var/lib/postgresql/data  
      ports:
        - 5432:5432
  # grafprom.api:
  #   container_name: grafpormapi
  #   hostname: grafpormapi
  #   image: ${DOCKER_REGISTRY-}grafpromapi
  #   build:
  #     context: .
  #     dockerfile: TechChallengeFIAP.API/Dockerfile
  #   environment:
  #       - ASPNETCORE_ENVIRONMENT=Development
  #       - ASPNETCORE_URLS=https://+:443;http://+:80
  #   ports:
  #       - 8082:80
  #       - 8084:443
  #   depends_on:
  #       prometheus:
  #           condition: service_healthy
  #       grafana:
  #           condition: service_healthy
    
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:9090/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s
  grafana:
    container_name: grafana
    image: grafana/grafana:master
    ports:
      - "3000:3000"
    volumes:
        - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
        - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
        prometheus:
            condition: service_healthy
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:3000/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s


